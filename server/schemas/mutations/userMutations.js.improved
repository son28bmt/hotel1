const graphql = require('graphql')
const { UserType, AuthType } = require("../Type.js")
const bcrypt = require('bcryptjs')
const User = require("../../models/User.js")
const verifyToken = require('../../middlewares/verifyToken.js')
const jwt = require('jsonwebtoken')
const GraphQLDate = require('graphql-date')

const { GraphQLID,
    GraphQLInt,
    GraphQLString,
    GraphQLList,
    GraphQLNonNull,
    GraphQLObjectType
} = graphql


const createUser = { // For creating new user
    type: UserType,
    args: {
        name: { type: new GraphQLNonNull(GraphQLString) },
        username: { type: new GraphQLNonNull(GraphQLString) },
        dob: { type: new GraphQLNonNull(GraphQLDate) },
        email: { type: new GraphQLNonNull(GraphQLString) },
        password: { type: new GraphQLNonNull(GraphQLString) }
    },
    async resolve(parent, args) {
        try {
            console.log('Creating user with email:', args.email);
            
            // Basic email format validation
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(args.email)) {
                throw new Error('Invalid email format.');
            }
            
            // Check if user already exists
            let query = await User.findOne({ email: args.email })
            if (query) {
                throw new Error('User already exists.')
            }
            
            // Hash password
            let passHash = await bcrypt.hash(args.password, 12)
            
            // Create JWT tokens
            const jwtSecret = process.env.JWT_SECRET || 'accessToken';
            const refreshSecret = process.env.REFRESH_SECRET || 'refreshToken';
            
            const accessToken = await jwt.sign({ email: args.email }, jwtSecret, {
                expiresIn: '4h'
            })
            const refreshToken = await jwt.sign({ email: args.email }, refreshSecret, {
                expiresIn: '7d'
            })
            
            // Create new user object
            let user = new User({
                username: args.username,
                name: args.name,
                email: args.email,
                password: passHash,
                dob: args.dob,
                accessToken: accessToken,
                refreshToken: refreshToken,
                accessTokenExp: '4h',
                refreshTokenExp: '7d'
            })
            
            // Save user to database
            console.log('Attempting to save user to database...');
            let res = await user.save();
            console.log('User saved successfully with ID:', res._id);
            
            return res;
        } catch (error) {
            console.error('Error in createUser mutation:', error);
            throw new Error(`Registration failed: ${error.message}`);
        }
    }
}

const generateToken = { // For generating new access token
    type: UserType,
    args: {
        refreshToken: { type: new GraphQLNonNull(GraphQLString) },
    },
    async resolve(parent, args) {
        try {
            if (!args.refreshToken) {
                throw new Error("Not a refresh token.")
            }
            
            let userEmail = await verifyToken(args.refreshToken)
            let user = await User.findOne({ email: userEmail })
            
            if (!user) {
                throw new Error("User not found with the provided token.")
            }
            
            const jwtSecret = process.env.JWT_SECRET || 'accessToken';
            const refreshSecret = process.env.REFRESH_SECRET || 'refreshToken';
            
            const accessToken = await jwt.sign({ email: user.email }, jwtSecret, {
                expiresIn: '4h'
            })
            const refreshToken = await jwt.sign({ email: user.email }, refreshSecret, {
                expiresIn: '7d'
            })
            
            return {
                username: user.username,
                email: user.email,
                dob: user.dob,
                name: user.name,
                id: user._id,
                accessToken: accessToken,
                refreshToken: refreshToken,
                accessTokenExp: user.accessTokenExp,
                refreshTokenExp: user.refreshTokenExp,
                isAdmin: user.isAdmin,
                isManager: user.isManager,
                isBlocked: user.isBlocked,
                joined: user.joined
            }
        } catch (error) {
            console.error('Error in generateToken mutation:', error);
            throw new Error(`Token generation failed: ${error.message}`);
        }
    }
}

// Other mutations remain the same...
const updateProfile = { /* ... existing code ... */ }
const deleteAccount = { /* ... existing code ... */ }
const makeManager = { /* ... existing code ... */ }
const blockUser = { /* ... existing code ... */ }

module.exports = {
    createUser,
    generateToken,
    updateProfile,
    deleteAccount,
    makeManager,
    blockUser,
}
